// client/src/components/ReservationForm.js

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { collection, query, where, getDocs, addDoc, deleteDoc, doc, Timestamp } from 'firebase/firestore';
import { auth, db } from '../firebase';
import './ReservationForm.css';

function ReservationForm() {
  const navigate = useNavigate();
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [reservations, setReservations] = useState({});
  const [reservationDetails, setReservationDetails] = useState({});
  const [reservationIds, setReservationIds] = useState({});
  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);
  const [selectedRoom, setSelectedRoom] = useState(null);

  const timeSlots = ['10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00'];
  const rooms = ['Room A', 'Room B', 'Room C', 'Room E'];

  useEffect(() => {
    fetchReservations(selectedDate);
  }, [selectedDate]);

  const fetchReservations = async (date) => {
    try {
      const dateStr = date.toISOString().split('T')[0];
      const reservationsRef = collection(db, 'reservations');
      const q = query(reservationsRef, where('date', '==', dateStr));
      const querySnapshot = await getDocs(q);
      
      const newReservations = {};
      const newReservationDetails = {};
      const newReservationIds = {};
      
      querySnapshot.forEach((doc) => {
        const data = doc.data();
        const key = `${dateStr}_${data.timeSlot}_${data.room}`;
        newReservations[key] = data.userId;
        newReservationDetails[key] = `${data.type}(${data.userName})`;
        newReservationIds[key] = doc.id;
      });
      
      setReservations(newReservations);
      setReservationDetails(newReservationDetails);
      setReservationIds(newReservationIds);
    } catch (error) {
      console.error('Error fetching reservations:', error);
    }
  };

  const handleDateChange = (e) => {
    const newDate = new Date(e.target.value);
    setSelectedDate(newDate);
  };

  const formatDateForDisplay = (date) => {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}년 ${month}월 ${day}일`;
  };

  const handleReservation = async (timeSlot, room) => {
    if (!auth.currentUser) {
      alert('로그인이 필요합니다.');
      navigate('/login');
      return;
    }

    const dateStr = selectedDate.toISOString().split('T')[0];
    const reservationKey = `${dateStr}_${timeSlot}_${room}`;
    
    if (reservations[reservationKey]) {
      if (reservations[reservationKey] === auth.currentUser.uid) {
        if (window.confirm('해당 예약을 취소하시겠습니까?')) {
          try {
            await deleteDoc(doc(db, 'reservations', reservationIds[reservationKey]));
            
            const newReservations = { ...reservations };
            const newReservationDetails = { ...reservationDetails };
            const newReservationIds = { ...reservationIds };
            
            delete newReservations[reservationKey];
            delete newReservationDetails[reservationKey];
            delete newReservationIds[reservationKey];
            
            setReservations(newReservations);
            setReservationDetails(newReservationDetails);
            setReservationIds(newReservationIds);
            
            alert('예약이 취소되었습니다.');
          } catch (error) {
            console.error('Error canceling reservation:', error);
            alert('예약 취소 중 오류가 발생했습니다.');
          }
        }
      } else {
        alert('이미 예약된 시간입니다.');
      }
      return;
    }

    setSelectedTimeSlot(timeSlot);
    setSelectedRoom(room);
  };

  const handleTypeSelection = async (type) => {
    if (!selectedTimeSlot || !selectedRoom) return;

    const dateStr = selectedDate.toISOString().split('T')[0];
    const reservationKey = `${dateStr}_${selectedTimeSlot}_${selectedRoom}`;

    try {
      const reservationData = {
        userId: auth.currentUser.uid,
        userName: auth.currentUser.displayName || '익명',
        date: dateStr,
        timeSlot: selectedTimeSlot,
        room: selectedRoom,
        type: type,
        createdAt: Timestamp.now()
      };

      const docRef = await addDoc(collection(db, 'reservations'), reservationData);
      
      setReservations(prev => ({
        ...prev,
        [reservationKey]: auth.currentUser.uid
      }));
      
      setReservationDetails(prev => ({
        ...prev,
        [reservationKey]: `${type}(${auth.currentUser.displayName || '익명'})`
      }));

      setReservationIds(prev => ({
        ...prev,
        [reservationKey]: docRef.id
      }));

      setSelectedTimeSlot(null);
      setSelectedRoom(null);
      alert('예약이 완료되었습니다.');
    } catch (error) {
      console.error('Error making reservation:', error);
      alert('예약 중 오류가 발생했습니다.');
    }
  };

  const getReservationClass = (timeSlot, room) => {
    const dateStr = selectedDate.toISOString().split('T')[0];
    const reservationKey = `${dateStr}_${timeSlot}_${room}`;
    if (reservations[reservationKey]) {
      const details = reservationDetails[reservationKey];
      const type = details.split('(')[0];
      return `reserved ${type === '레슨' ? 'lesson' : 'practice'}`;
    }
    return 'available';
  };

  const handleMouseLeave = () => {
    setSelectedTimeSlot(null);
    setSelectedRoom(null);
  };

  const getReservationText = (timeSlot, room) => {
    const dateStr = selectedDate.toISOString().split('T')[0];
    const reservationKey = `${dateStr}_${timeSlot}_${room}`;
    
    if (selectedTimeSlot === timeSlot && selectedRoom === room) {
      return (
        <div 
          className="type-buttons" 
          onClick={(e) => e.stopPropagation()}
          onMouseLeave={handleMouseLeave}
        >
          <button 
            className="type-button lesson"
            onClick={() => handleTypeSelection('레슨')}
          >
            레슨
          </button>
          <button 
            className="type-button practice"
            onClick={() => handleTypeSelection('연습')}
          >
            연습
          </button>
        </div>
      );
    }
    
    return reservations[reservationKey] 
      ? reservationDetails[reservationKey]
      : '예약하기';
  };

  return (
    <div className="reservation-container">
      <h2>놀이터 예약</h2>
      
      <div className="date-selector">
        <div className="date-display">
          <span className="date-label">날짜 선택:</span>
          <span className="date-value">{formatDateForDisplay(selectedDate)}</span>
        </div>
        <input
          type="date"
          value={selectedDate.toISOString().split('T')[0]}
          onChange={handleDateChange}
          min={new Date().toISOString().split('T')[0]}
          className="date-input"
        />
      </div>
      
      <div className="reservation-table">
        <table>
          <thead>
            <tr>
              <th>시간</th>
              {rooms.map(room => (
                <th key={room}>{room}</th>
              ))}
            </tr>
          </thead>
          <tbody>
            {timeSlots.map(timeSlot => (
              <tr key={timeSlot}>
                <td>{timeSlot}</td>
                {rooms.map(room => (
                  <td 
                    key={`${timeSlot}-${room}`}
                    className={`${getReservationClass(timeSlot, room)} clickable`}
                    onClick={() => handleReservation(timeSlot, room)}
                  >
                    {getReservationText(timeSlot, room)}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

export default ReservationForm;